<?php


/*
+---------------------------------------------------------------------------+
| OpenX v${RELEASE_MAJOR_MINOR}                                                                |
| ======${RELEASE_MAJOR_MINOR_DOUBLE_UNDERLINE}                                                                 |
|                                                                           |
| Copyright (c) 2003-2009 OpenX Limited                                     |
| For contact details, see: http://www.openx.org/                           |
|                                                                           |
| This program is free software; you can redistribute it and/or modify      |
| it under the terms of the GNU General Public License as published by      |
| the Free Software Foundation; either version 2 of the License, or         |
| (at your option) any later version.                                       |
|                                                                           |
| This program is distributed in the hope that it will be useful,           |
| but WITHOUT ANY WARRANTY; without even the implied warranty of            |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             |
| GNU General Public License for more details.                              |
|                                                                           |
| You should have received a copy of the GNU General Public License         |
| along with this program; if not, write to the Free Software               |
| Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA |
+---------------------------------------------------------------------------+
$Id: DalAdmin.dal.test.bak 4566 2006-04-04 08:24:19Z andrew@m3.net $
*/

require_once MAX_PATH.'/lib/Max.php';
require_once MAX_PATH.'/lib/max/DB.php';
require_once MAX_PATH.'/lib/max/Dal/Admin.php';

require_once OX_PATH . '/lib/OX.php';

Mock::generate('TargetingStatistics');

/**
 * A class for testing the non-DB specific Admin DAL class.
 *
 * @package    MaxDal
 * @subpackage TestSuite
 * @author     Andrew Hill <andrew@m3.net>
 * @author     Robert Hunter <roh@m3.net>
 *
 */
class Dal_TestOfDalAdmin extends UnitTestCase
{
    /**
     * The constructor method.
     */
    function Dal_TestOfDalAdmin()
    {
        $this->UnitTestCase();
        $this->oDalAdmin = null;
    }

    function setUp()
    {
        $this->oDalAdmin = new MAX_Dal_Admin();
        $this->conf = $GLOBALS['_MAX']['CONF'];
        $this->table_prefix = $this->conf['table']['prefix'];
        TestEnv :: StartTransaction();
        $this->dbh = & MAX_DB :: singleton();
    }

    function tearDown()
    {
        TestEnv :: rollbackTransaction();

        // HACK: Why does the data still exist? Rollback should remove it.
        $ad_table = $this->table_prefix.$this->conf['table']['banners'];
        $data_table = $this->table_prefix.$this->conf['table']['data_intermediate_ad'];
        $adzone_table = $this->table_prefix.$this->conf['table']['data_summary_ad_zone_assoc'];

        $this->dbh->query("DELETE FROM {$ad_table}");
        $this->dbh->query("DELETE FROM {$data_table}");
        $this->dbh->query("DELETE FROM {$adzone_table}");
    }

    function testGetPlacementOverviewFailsOnIncorrectInput()
    {
        $ret = $this->oDalAdmin->getPlacementOverviewTargetingStatistics(0, 0, 0);
        $this->assertEqual($ret, false, 'Returns false on invalid parameters');
    }

    function testGetPlacementDailyTargetingStatistsFailsOnIncorrectInput()
    {
        $ret = $this->oDalAdmin->getPlacementDailyTargetingStatistics(0, 0, 0);
        $this->assertEqual($ret, false, 'Returns false on invalid parameters. %s');
    }

    function testGetPlacementOverviewFailsOnReversedDateRange()
    {
        $monday = new Date('2001-01-01 00:00:00');
        $friday = new Date('2001-01-05 00:00:00');
        $backward = $this->oDalAdmin->getPlacementOverviewTargetingStatistics(0, $friday, $monday);
        $this->assertEqual($backward, false, 'Fails when the finish date is before the start date');
    }

    function testGetPlacementOverview()
    {
        // TODO: Consider returning results even when no data is available.
        $monday = new Date('2001-01-01 00:00:00');
        $friday = new Date('2001-01-05 00:00:00');

        $overview = $this->oDalAdmin->getPlacementOverviewTargetingStatistics(50, $monday, $friday);
        $this->assertEqual(count($overview), 0, 'Overview should be empty until some data is loaded. %s');
    }

    function testGetPlacementDailyTargetingStatistics()
    {
        // TODO: Consider returning results even when no data is available.
        $monday = new Date('2001-01-01 00:00:00');

        $stats = $this->oDalAdmin->getPlacementDailyTargetingStatistics(50, $monday, $monday);
        $this->assertEqual(count($stats), 0, 'Daily targeting statistics should be empty until some data is loaded. %s');
    }

    function testGetZoneTargetingStatistics()
    {
        $monday = new Date('2001-01-01 00:00:00');
        $friday = new Date('2001-01-05 00:00:00');
        $stats = $this->oDalAdmin->getZoneTargetingStatistics(23, $monday, $friday);

        $this->assertIsA($stats, 'array');
        $number_of_ads = count($stats);
        $this->assertEqual($number_of_ads, 0, 'No ads are loaded, so statistics should be empty. %s');
    }

    function testCountOperationIntervalsForAdZoneCombo()
    {
        $intervals = $this->oDalAdmin->countOperationIntervalsForAdZoneCombo(1, 1);
        $this->assertEqual($intervals, 0, "No operation intervals should exist to begin with. %s");
    }

    function testAddOperationIntervalSummaryIncreasesCount()
    {
        $ad_id = 1;
        $zone_id = 1;

        $this->addExampleOperationInterval($ad_id, $zone_id);
        $intervals_after_add = $this->oDalAdmin->countOperationIntervalsForAdZoneCombo($ad_id, $zone_id);
        $this->assertEqual($intervals_after_add, 1, 'One additional Add operation should bring the total to 1. %s');
    }

    function addExampleOperationInterval($ad_id, $zone_id)
    {
        $interval_start = new Date('2001-01-01 00:00:00');
        $interval_end = new Date('2001-01-01 00:59:59');
        $impressions_requested = 50;
        $impressions_delivered = 10;
        $this->oDalAdmin->addOperationIntervalSummary($interval_start, $interval_end, $impressions_requested, $impressions_delivered, $ad_id, $zone_id);
    }

    function testCountAdsInDatabase()
    {
        $number_of_ads = $this->oDalAdmin->countAdsInDatabase();
        $this->assertEqual($number_of_ads, 0, 'No ads should be present unless they are explicitly added. %s');
    }
}

class Dal_TestOfDalAdminWithSimpleData extends Dal_TestOfDalAdmin
{
    function setUp()
    {
        parent :: setUp();
        $this->_populateIntermediateAdData();
        $this->_populateSummaryAdZoneAssocTable();
        $this->_populateAdTable();
    }

    function _populateIntermediateAdData()
    {
        $data_table = $this->table_prefix.$this->conf['table']['data_intermediate_ad'];
        $sql = "INSERT INTO {$data_table}
            (interval_start, interval_end, ad_id, zone_id, impressions)
            VALUES
            ('2001-01-01 00:00:00', '2001-01-01 00:59:59', 40, 50, 50),
            ('2001-01-01 00:00:00', '2001-01-01 00:59:59', 40, 51, 30),
            ('2001-01-01 01:00:00', '2001-01-01 01:59:59', 50, 50, 51),
            ('2001-01-02 00:00:00', '2001-01-02 00:59:59', 40, 50, 40),
            ('2001-01-02 01:00:00', '2001-01-02 01:59:59', 40, 50, 80)";
        $this->dbh->query($sql);
    }

    function _populateSummaryAdZoneAssocTable()
    {
        $adzone_table = $this->table_prefix.$this->conf['table']['data_summary_ad_zone_assoc'];
        $sql = "INSERT INTO {$adzone_table}
            (interval_start, interval_end, ad_id, zone_id, impressions_requested, priority, priority_factor)
            VALUES
            ('2001-01-01 00:00:00', '2001-01-01 00:59:59', 40, 50, 100, 0.0, 1.0),
            ('2001-01-01 00:00:00', '2001-01-01 00:59:59', 40, 51, 200, 0.5, 2.0),
            ('2001-01-01 01:00:00', '2001-01-01 01:59:59', 50, 50, 101, 1.0, 3.0),
            ('2001-01-02 00:00:00', '2001-01-02 00:59:59', 40, 50, 150, 1.5, 4.0),
            ('2001-01-02 01:00:00', '2001-01-02 01:59:59', 40, 50, 100, 2.0, 5.0)";
        $this->dbh->query($sql);
    }

    function _populateAdTable()
    {
        $ad_table = $this->table_prefix.$this->conf['table']['banners'];
        $insert_sql = "INSERT INTO {$ad_table} (bannerid, campaignid) VALUES (40, 34), (50, 35)";
        $this->dbh->query($insert_sql);
    }

    function testCountOperationIntervalsForAdZoneCombo()
    {
        $intervals = $this->oDalAdmin->countOperationIntervalsForAdZoneCombo(40, 50);
        $this->assertEqual($intervals, 3, "Each interval that an ad/zone combo appears in should be counted separately. %s");
    }

    function testGetZoneTargetingStatisticsForNonexistantZone()
    {
        $monday = new Date('2001-01-01 00:00:00');
        $friday = new Date('2001-01-05 00:00:00');
        $stats = $this->oDalAdmin->getZoneTargetingStatistics(23, $monday, $friday);

        $this->assertIsA($stats, 'array');
        $number_of_ads = count($stats);
        $this->assertEqual($number_of_ads, 0, 'No ads are loaded for this zone, so statistics should be empty. %s');
    }

    function testGetAdTargetingStatisticsForNonexistantAd()
    {
        $start = new Date('2001-01-01 00:00:00');
        $end = new Date('2001-01-01 00:59:59');
        $stats = $this->oDalAdmin->getAdTargetingStatistics(17, $start, $end);
        $number_of_zones = count($stats);
        $this->assertEqual($number_of_zones, 0, 'No zones are loaded for this ad, so statistics should be empty.');
    }

    function testGetAdTargetingStatisticsForActualAd()
    {
        $start = new Date('2001-01-01 00:00:00');
        $end = new Date('2001-01-01 00:59:59');

        $stats = $this->oDalAdmin->getAdTargetingStatistics(40, $start, $end);
        $this->assertIsa($stats[51], 'array');
        $this->assertEqual($stats[51]['priority'], 0.5, 'Zone 51 has this ad with a priority of 0.5. %s');
        $this->assertEqual($stats[51]['priority_factor'], 2.0, 'Zone 51 has this ad with a priority factor of 2.0. %s');
    }

    function testGetZoneTargetingStatisticsForActualZone()
    {
        $monday = new Date('2001-01-01 00:00:00');
        $friday = new Date('2001-01-05 00:00:00');
        $stats = $this->oDalAdmin->getZoneTargetingStatistics(50, $monday, $friday);

        $number_of_ads = count($stats);
        $this->assertEqual($number_of_ads, 2, 'Two unique ad IDs have zones in the interval. %s');
        $this->assertTrue(key_exists(40, $stats), 'There are several records for Ad ID 40 in this interval.');
        $this->assertTrue(key_exists(50, $stats), 'There is one record for Ad ID 50 in this interval.');
        $adForty = $stats[40];
        $adFifty = $stats[50];
        $this->assertTrue($adFifty['impressions_requested'], 350);
        $this->assertTrue($adFifty['actual_impressions'], 170);
    }

    function testGetZoneTargetingStatisticsObeysDateRange()
    {
        $tuesday_midnight = new Date('2001-01-02 00:00:00');
        $wednesday_midnight = new Date('2001-01-03 00:00:00');

        $stats = $this->oDalAdmin->getZoneTargetingStatistics(50, $tuesday_midnight, $wednesday_midnight);
        $ads_on_tuesday = count($stats);
        $this->assertEqual($ads_on_tuesday, 1, 'Only one unique ad has records on Tuesday. %s');
    }

    function testGetZoneTargetingStatisticsRetrievesPriority()
    {
        $interval_start = new Date('2001-01-02 00:00:00');
        $interval_end = new Date('2001-01-02 00:59:59');
        $stats = $this->oDalAdmin->getZoneTargetingStatistics(50, $interval_start, $interval_end);
        $this->assertTrue(key_exists('priority', $stats[40]), "Ad 40 in Zone 50 should have a priority available, based on the example data.");
        $this->assertEqual($stats[40]['priority'], 1.5);
    }

    function testCountAdsInDatabase()
    {
        $number_of_ads = $this->oDalAdmin->countAdsInDatabase();
        $this->assertEqual($number_of_ads, 2, 'Two ads (IDs 40 and 50) are present in the sample data.');
    }

    function testFindAdsInPlacement()
    {
        $ads = $this->oDalAdmin->findAdsInPlacement(34);
        $this->assertEqual(count($ads), 1, 'One ad (ID 40) is loaded in Placement 34. %s');
        $this->assertEqual($ads[0], 40);
    }

    function testFindZonesInPlacement()
    {
        $zones = $this->oDalAdmin->findZonesInPlacement(34);
        $this->assertEqual(count($zones), 2, 'Two zones (IDs 50 and 51) are loaded in Placement 34. %s');
        $this->assertEqual($zones[0], 50);
        $this->assertEqual($zones[1], 51);
    }

    function testGetPlacementOverview()
    {
        $monday = new Date('2001-01-01 00:00:00');
        $friday = new Date('2001-01-05 00:00:00');

        $overview = $this->oDalAdmin->getPlacementOverviewTargetingStatistics(35, $monday, $friday);
        $this->assertEqual(count($overview), 1, 'Only one day of day is available, even though five were requested. %s');
        $this->assertEqual($overview[0]['day'], '2001-01-01');
    }

    function testGetPlacementOverviewMultipleZones()
    {
        $monday = new Date('2001-01-01 00:00:00');
        $friday = new Date('2001-01-05 00:00:00');

        $overview = $this->oDalAdmin->getPlacementOverviewTargetingStatistics(34, $monday, $friday);
        $this->assertEqual(count($overview), 2, 'Only two days of day is available, even though five were requested. %s');
    }

    function testGetPlacementOverviewDoesImpressionsSums()
    {
        $monday = new Date('2001-01-01 00:00:00');
        $tuesday = new Date('2001-01-02 00:00:00');

        $overview = $this->oDalAdmin->getPlacementOverviewTargetingStatistics(34, $monday, $tuesday);
        $monday_results = $overview[0];
        $this->assertEqual($monday_results['rows'], 2);
        $this->assertEqual($monday_results['actual_impressions'], 80);
        $this->assertEqual($monday_results['impressions_requested'], 300);
    }

    function testGetPlacementDailyTargetingStatistics()
    {
        $monday = new Date('2001-01-01 00:00:00');

        $stats = $this->oDalAdmin->getPlacementDailyTargetingStatistics(35, $monday, $monday);
        $this->assertEqual(count($stats), 1, 'Placment 35 has only one operational interval on Monday. %s');
    }

    function testGetPlacementDailyTargetingStatisticsHasKeys()
    {
        $monday = new Date('2001-01-01 00:00:00');
        $one_am = new Date('2001-01-01 00:59:59');
        $stats = $this->oDalAdmin->getPlacementDailyTargetingStatistics(34, $monday);
        $first_hour = $stats[0];

        $this->assertTrue(key_exists('interval_start', $first_hour), 'Daily targeting statistics must have a [interval_start] key');
        $this->assertTrue(key_exists('interval_end', $first_hour), 'Daily targeting statistics must have a [interval_end] key');
        $this->assertTrue(key_exists('additional_details', $first_hour), 'Daily targeting statistics must have a [additional_details] key');
    }

    function testGetPlacementDailyTargetingStatisticsIntervalIsSane()
    {
        $interval_start = new Date('2001-01-01 00:00:00');
        $interval_end = new Date('2001-01-01 00:59:59');
        $monday = new Date('2001-01-01');

        $stats = $this->oDalAdmin->getPlacementDailyTargetingStatistics(34, $monday);
        $first_hour = $stats[0];

        $this->assertEqual($first_hour['interval_start'], $interval_start);
        $this->assertEqual($first_hour['interval_end'], $interval_end);
    }

    function testGetPlacementDailyTargetingStatisticsGetsImpressions()
    {
        $monday = new Date('2001-01-01');
        $stats = $this->oDalAdmin->getPlacementDailyTargetingStatistics(34, $monday);
        $first_hour = $stats[0];
        $this->assertEqual($first_hour['impressions_requested'], 300, 'The two intervals on Monday with ad #40 should add to 300 impressions requested for the day. %s');
        $this->assertEqual($first_hour['actual_impressions'], 80);
    }

    function testSummariseSingleIntervalMutlipleEntries()
    {
    	$intervals = array(
    	    array(
                'interval_start' => '2001-01-01 00:00:00',
                'impressions_requested' => 500,
                'actual_impressions' =>  505
    	      ), array(
                'interval_start' => '2001-01-01 00:00:00',
                'impressions_requested' => 100,
                'actual_impressions' =>  101
    	      ),
    	);
    	$summary = $this->oDalAdmin->summariseIntervals($intervals, 'interval_start');
    	$this->assertEqual($summary[0]['impressions_requested'], 600);
    	$this->assertEqual($summary[0]['actual_impressions'], 606);
    }

    function testSummariseMultipleIntervalsMutlipleEntries()
    {
    	$intervals = array(
    	    array(
                'interval_start' => '2001-01-01 00:00:00',
                'impressions_requested' => 500,
                'actual_impressions' =>  505
    	      ), array(
                'interval_start' => '2001-01-01 00:00:00',
                'impressions_requested' => 100,
                'actual_impressions' =>  101
    	      ), array(
                'interval_start' => '2001-01-01 01:00:00',
                'impressions_requested' => 400,
                'actual_impressions' =>  404
    	      ), array(
                'interval_start' => '2001-01-01 01:00:00',
                'impressions_requested' => 300,
                'actual_impressions' =>  303
    	      ),

    	);
    	$summary = $this->oDalAdmin->summariseIntervals($intervals, 'interval_start');
    	$this->assertEqual($summary[0]['impressions_requested'], 600);
    	$this->assertEqual($summary[0]['actual_impressions'], 606);
    }

    function testRequestedImpressionVariation()
    {
    	$monday = new Date('2001-01-01');
        $stats = $this->oDalAdmin->getPlacementDailyTargetingStatistics(34, $monday);
        $first_hour = $stats[0];
        $this->assertEqual($first_hour['additional_details']->minimumRequestRate(), 100, 'There should be no variation when the data only has one row of targeting information for the interval. %s');
        $this->assertEqual($first_hour['additional_details']->maximumRequestRate(), 100, 'There should be no variation when the data only has one row of targeting information for the interval. %s');
    }
}


class Dal_TestOfDalAdminWithOverlappingData extends Dal_TestOfDalAdminWithSimpleData
{
    function _populateSummaryAdZoneAssocTable()
    {
        $adzone_table = $this->table_prefix.$this->conf['table']['data_summary_ad_zone_assoc'];
        $sql = "INSERT INTO {$adzone_table}
            (interval_start, interval_end, ad_id, zone_id, impressions_requested, priority, priority_factor, expired)
            VALUES
            ('2001-01-01 00:00:00', '2001-01-01 00:59:59', 40, 50, 150, 0.0, 1.0, '2001-01-01 00:30:00'),
            ('2001-01-01 00:00:00', '2001-01-01 00:59:59', 40, 50, 50, 0.0, 1.0, NULL),
            ('2001-01-01 00:00:00', '2001-01-01 00:59:59', 40, 51, 200, 0.5, 2.0, NULL),
            ('2001-01-01 01:00:00', '2001-01-01 01:59:59', 50, 50, 101, 1.0, 3.0, NULL),
            ('2001-01-02 00:00:00', '2001-01-02 00:59:59', 40, 50, 150, 1.5, 4.0, NULL),
            ('2001-01-02 01:00:00', '2001-01-02 01:59:59', 40, 50, 100, 2.0, 5.0, NULL)";
        $this->dbh->query($sql);
    }

    function testRequestedImpressionVariation()
    {
    	$monday = new Date('2001-01-01');
        $stats = $this->oDalAdmin->getPlacementDailyTargetingStatistics(34, $monday);
        $first_hour = $stats[0];
        $this->assertEqual($first_hour['additional_details']->minimumRequestRate(), 100, 'The 50 requested impressions per half hour should result in a minimum target of 100 impressions per hour. %s');
        $this->assertEqual($first_hour['additional_details']->maximumRequestRate(), 300, 'The 150 requested impressions per half hour should result in a maximum target of 300 impressions per hour. %s');
    }
}

class Dal_TestOfDalAdminWithCrossHourOverlappingData extends Dal_TestOfDalAdminWithSimpleData
{
    function _populateSummaryAdZoneAssocTable()
    {
        $adzone_table = $this->table_prefix.$this->conf['table']['data_summary_ad_zone_assoc'];
        $sql = "INSERT INTO {$adzone_table}
            (interval_start, interval_end, ad_id, zone_id, impressions_requested, priority, priority_factor, expired)
            VALUES
            ('2001-01-01 00:00:00', '2001-01-01 00:59:59', 40, 50, 100, 0.0, 1.0, '2001-01-01 00:45:00'),
            ('2001-01-01 00:00:00', '2001-01-01 00:59:59', 40, 50, 75, 0.0, 1.0, '2001-01-01 01:30:00'),
            ('2001-01-01 00:00:00', '2001-01-01 00:59:59', 40, 51, 200, 0.5, 2.0, NULL),
            ('2001-01-01 01:00:00', '2001-01-01 01:59:59', 50, 50, 101, 1.0, 3.0, NULL),
            ('2001-01-02 00:00:00', '2001-01-02 00:59:59', 40, 50, 150, 1.5, 4.0, NULL),
            ('2001-01-02 01:00:00', '2001-01-02 01:59:59', 40, 50, 100, 2.0, 5.0, NULL)";
        $this->dbh->query($sql);
    }

    /**
     * XXX: This is really more of an integration test.
     */
    function testRequestedImpressionVariation()
    {
    	$monday = new Date('2001-01-01');
        $stats = $this->oDalAdmin->getPlacementDailyTargetingStatistics(34, $monday);
        $details = $stats[0]['additional_details'];
        $min = $details->minimumRequestRate();
        $this->assertEqual(round($min), 133, 'The 100 requested impressions per three-quearter hour period should result in a minimum target of 133.3333333... impressions per hour. %s');
    }
}

class Dal_TestOfDalAdminWithMissingTargetData extends Dal_TestOfDalAdmin
{
    function _populateIntermediateAdData()
    {
        $data_table = $this->table_prefix.$this->conf['table']['data_intermediate_ad'];
        $sql = "INSERT INTO {$data_table}
            (interval_start, interval_end, ad_id, zone_id, impressions)
            VALUES
            ('2001-01-01 00:00:00', '2001-01-02 00:59:59', 40, 50, 100),
            ('2001-01-02 00:00:00', '2001-01-02 00:59:59', 40, 50, 40),
            ('2001-01-02 01:00:00', '2001-01-02 01:59:59', 40, 50, 80)";
        $this->dbh->query($sql);
    }

    function _populateSummaryAdZoneAssocTable()
    {
        $adzone_table = $this->table_prefix.$this->conf['table']['data_summary_ad_zone_assoc'];
        $sql = "INSERT INTO {$adzone_table}
            (interval_start, interval_end, ad_id, zone_id, impressions_requested, priority, priority_factor)
            VALUES
            ('2001-01-02 00:00:00', '2001-01-02 00:59:59', 40, 50, 150, 1.5, 4.0)";
        $this->dbh->query($sql);
    }

    function _populateAdTable()
    {
        $ad_table = $this->table_prefix.$this->conf['table']['banners'];
        $insert_sql = "INSERT INTO {$ad_table} (bannerid, campaignid) VALUES (40, 34)";
        $this->dbh->query($insert_sql);
    }

    function testGetPlacementDailyTargetingStats()
    {
		$this->_populateIntermediateAdData();
		$this->_populateSummaryAdZoneAssocTable();
		$this->_populateAdTable();
		$tuesday = new Date('2001-01-02');

		$stats = $this->oDalAdmin->getPlacementDailyTargetingStatistics(34, $tuesday);
		$hour_with_stats = $stats[0];
		$hour_without_stats = $stats[1];
		$this->assertEqual($hour_with_stats['impressions_requested'], 150);
		$this->assertEqual($hour_with_stats['actual_impressions'], 40);
		$this->assertEqual($hour_without_stats['impressions_requested'], null);
		$this->assertEqual($hour_without_stats['actual_impressions'], 80);
    }

    function testGetPlacementOverview()
    {
	    $this->_populateIntermediateAdData();
	    $this->_populateSummaryAdZoneAssocTable();
	    $this->_populateAdTable();
        $tuesday = new Date('2001-01-02');
        $wednesday = new Date('2001-01-03');

		$stats = $this->oDalAdmin->getPlacementOverviewTargetingStatistics(34, $tuesday, $wednesday);
		$tuesday_stats = $stats[0];
		$this->assertEqual($tuesday_stats['actual_impressions'], 120, '40 + 80 impressions for the day. %s');
    }

    function testGetPlacementOverview_EmptyDay()
    {
        $this->_populateIntermediateAdData();
	    $this->_populateSummaryAdZoneAssocTable();
	    $this->_populateAdTable();
	    $monday = new Date('2001-01-01');
        $wednesday = new Date('2001-01-03');

		$stats = $this->oDalAdmin->getPlacementOverviewTargetingStatistics(34, $monday, $wednesday);
		$monday_stats = $stats[0];
		$this->assertEqual($monday_stats['actual_impressions'], 100, 'Even though there are no requested impressions, there were still some delivered. %s');
		$this->assertNull($monday_stats['impressions_requested'], 'If there are no requested impressions for a day, then null should be used instead. %s');
    }
}

class Dal_TestOfDalAdmin_WithDuplicateIntermediateData extends Dal_TestOfDalAdmin
{
    function _populateIntermediateAdData()
    {
        $data_table = $this->table_prefix.$this->conf['table']['data_intermediate_ad'];
        $sql = "INSERT INTO {$data_table}
            (interval_start, interval_end, ad_id, zone_id, creative_id, impressions)
            VALUES
            ('2001-01-01 00:00:00', '2001-01-02 00:59:59', 40, 50, 0,  40),
            ('2001-01-01 00:00:00', '2001-01-02 00:59:59', 40, 50, 26, 1),
            ('2001-01-01 00:00:00', '2001-01-02 00:59:59', 40, 50, 0,  80),
            ('2001-01-01 00:00:00', '2001-01-02 00:59:59', 40, 50, 26, 2)";
        $this->dbh->query($sql);
    }

    function _populateSummaryAdZoneAssocTable()
    {
        $adzone_table = $this->table_prefix.$this->conf['table']['data_summary_ad_zone_assoc'];
        $sql = "INSERT INTO {$adzone_table}
            (interval_start, interval_end, ad_id, zone_id, impressions_requested, priority, priority_factor)
            VALUES
            ('2001-01-01 00:00:00', '2001-01-01 00:59:59', 40, 50, 150, 1.5, 4.0)";
        $this->dbh->query($sql);
    }

    function _populateAdTable()
    {
        $ad_table = $this->table_prefix.$this->conf['table']['banners'];
        $insert_sql = "INSERT INTO {$ad_table} (bannerid, campaignid) VALUES (40, 34)";
        $this->dbh->query($insert_sql);
    }

    /*
     * Illustrates ticket #349, "Daily targeting summary mis-handles multiple data"
     */
    function testBug349_Fixed()
    {
    	$this->_populateAdTable();
    	$this->_populateIntermediateAdData();
    	$this->_populateSummaryAdZoneAssocTable();
        $monday  = new Date('2001-01-01');

        $day_stats = $this->oDalAdmin->getPlacementDailyTargetingStatistics(34, $monday);
		$hour_stats = $day_stats[0];
		$this->assertEqual($hour_stats['actual_impressions'], 123, '40 + 80 + 1 + 2 = 123 impressions for the day, but bug 349 shows only 40. %s');
    }
}

class IntervalTest extends UnitTestCase
{
    var $expired_at_20;
    var $expired_at_30;
    var $expired_at_40;
    var $not_expired;
    var $interval;

    function setUp()
    {
        $this->expired_at_20 = array(
            'interval_start' => '2001-01-01 00:00:00',
            'interval_end' => '2001-01-01 00:59:59',
            'interval_length' => '60',
            'impressions_requested' => 333,
            'expired' => '2001-01-01 00:20:00');
        $this->expired_at_30 = array(
            'interval_start' => '2001-01-01 00:00:00',
            'interval_end' => '2001-01-01 00:59:59',
            'interval_length' => '60',
            'impressions_requested' => 300,
            'expired' => '2001-01-01 00:30:00');
        $this->expired_at_40 = array(
            'interval_start' => '2001-01-01 00:00:00',
            'interval_end' => '2001-01-01 00:59:59',
            'interval_length' => '60',
            'impressions_requested' => 666,
            'expired' => '2001-01-01 00:40:00');
        $this->not_expired = array(
            'interval_start' => '2001-01-01 00:00:00',
            'interval_end' => '2001-01-01 00:59:59',
            'interval_length' => '60',
            'impressions_requested' => 600,
            'expired' => null);
        $this->not_expired_in_another_interval = array(
            'interval_start' => '2001-01-01 01:00:00',
            'interval_end' => '2001-01-01 01:59:59',
            'interval_length' => '60',
            'impressions_requested' => 1000,
            'expired' => null);
        $this->interval = new FragmentAwareOperationInterval();
    }

    function testNonfragmentedInterval()
    {
        $nonfragmented_stats = array($this->not_expired);
        $processed_stats = $this->interval->unifyStats($nonfragmented_stats);
        $only_interval = $processed_stats[0];
        $this->assertEqual($only_interval['impressions_requested'], 600);
    }

    function testEvenlySpreadHalves()
    {
        $fragmented_stats = array($this->expired_at_30, $this->not_expired);
        $unified_stats = $this->interval->unifyStats($fragmented_stats);
        $this->assertEqual(count($unified_stats), 1, 'Unified statistics should have only one entry per operation interval. %s');
        $only_interval = $unified_stats[0];
        $this->assertEqual($only_interval['impressions_requested'], 450, 'Two intervals fragments of even length should produce a simple average. %s');
    }

    function testEvenlySpreadThirds()
    {
        $fragmented_stats = array($this->expired_at_20, $this->expired_at_40, $this->not_expired);
        $unified_stats = $this->interval->unifyStats($fragmented_stats);
        $this->assertEqual(count($unified_stats), 1, 'Unified statistics should have only one enty per operation interval. %s');
        $only_interval = $unified_stats[0];
        $this->assertEqual($only_interval['impressions_requested'], 111+222+200, 'Three intervals fragments of even length should produce a simple average. %s');
    }

    function testUnevenlySpreadHalves()
    {
        $fragmented_stats = array($this->expired_at_20, $this->not_expired);
        $unified_stats = $this->interval->unifyStats($fragmented_stats);
        $only_interval = $unified_stats[0];
        $this->assertEqual($only_interval['impressions_requested'], 111+400, 'The spread is proportional to input figures. %s');
    }

    function testUnevenlySpreadQuarters()
    {
        $fragmented_stats = array($this->expired_at_20, $this->expired_at_30, $this->expired_at_40, $this->not_expired);
        $unified_stats = $this->interval->unifyStats($fragmented_stats);
        $only_interval = $unified_stats[0];
        $this->assertEqual($only_interval['impressions_requested'], 111+50+111+200, 'Should be pretty close to that. %s');
    }

    function testMultipleIntervals()
    {
        $fragmented_stats = array($this->not_expired, $this->not_expired_2);
        $unified_stats = $this->interval->unifyStats($fragmented_stats);
        $this->assertEqual(count($unified_stats), 2, 'Two intervals were passed in, two should be returned. %s');
    }

    function testMissingFieldsAreOK()
    {
        $data = array('ad_id' => 1, 'impressions_requested' => 5000);
        $unified_stats = $this->interval->unifyStats(array($data));

        $this->assertEqual($unified_stats[0]['impressions_requested'], 5000);
    }

    function testAdditionalFieldsAreKept()
    {
        $extra_stats = $this->not_expired;
        $extra_stats['magic_number'] = 42;
        $extra_stats['favourite_colour'] = 'Blue';
        $unified_stats = $this->interval->unifyStats(array($extra_stats));
        $this->assertEqual($unified_stats[0]['magic_number'], 42);
        $this->assertEqual($unified_stats[0]['favourite_colour'], 'Blue');
    }

    function testUnifyingEmptyData()
    {
        $results = $this->interval->unifyStats(array());
        $this->assertEqual(count($results), 0, 'Empty set should be unified to an empty set. %s');
    }

    function testMultipleZonesAreKeptSeparate()
    {
        $zone1 = $this->not_expired;
        $zone2 = $this->not_expired;
        $zone1['zone_id'] = 1;
        $zone2['zone_id'] = 2;
        $unified_stats = $this->interval->unifyStats(array($zone1, $zone2));
        $this->assertEqual($unified_stats[0]['zone_id'], 1);
        $this->assertEqual($unified_stats[1]['zone_id'], 2);
    }

    function testMultipleAdsAreKeptSeparate()
    {
        $ad1 = $this->not_expired;
        $ad2 = $this->not_expired;
        $ad1['ad_id'] = 1;
        $ad2['ad_id'] = 2;
        $unified_stats = $this->interval->unifyStats(array($ad1, $ad2));
        $this->assertEqual($unified_stats[0]['ad_id'], 1);
        $this->assertEqual($unified_stats[1]['ad_id'], 2);
    }

    function testMultipleAdZoneCombosAreKeptSeparate()
    {
        $interval1 = $this->not_expired;
        $interval2 = $this->not_expired;
        $interval1['ad_id'] = 100;
        $interval1['zone_id'] = 20;
        $interval2['ad_id'] = 110;
        $interval2['zone_id'] = 22;
        $unified_stats = $this->interval->unifyStats(array($interval1, $interval2));
        $this->assertEqual($unified_stats[0]['ad_id'], 100);
        $this->assertEqual($unified_stats[0]['zone_id'], 20);
        $this->assertEqual($unified_stats[1]['ad_id'], 110);
        $this->assertEqual($unified_stats[1]['zone_id'], 22);
    }

    function testUnifyStatsFromADifferentInterval()
    {
        $input = array(array(
            "day" => '2001-01-01',
            "interval_start" => '2001-01-01 01:00:00',
            "expired" => false,
            "impressions_requested" => 101,
            "actual_impressions" => 51,
            "ad_id" => 50,
            "zone_id" => 50,
            "rows" => 1
        ));
        $unified_stats = $this->interval->unifyStats($input);
        $this->assertEqual($unified_stats['day'], $input['day'], 'No reason to touch these. %s');
        $this->assertEqual($unified_stats['interval_start'], $input['interval_start']);
        $this->assertEqual($unified_stats['impressions_requested'], $input['impressions_requested']);
        $this->assertEqual($unified_stats['actual_impressions'], $input['actual_impressions'], 'No reason to touch these. %s');
        $this->assertEqual($unified_stats['ad_id'], $input['ad_id'], 'No reason to touch these. %s');
        $this->assertEqual($unified_stats['zone_id'], $input['zone_id'], 'No reason to touch these. %s');

    }


    function testSplitArrayByKey()
    {
        $mixed = array(
            array('colour' => 'blue', 'animal' => 'fish', 'unique' => 1),
            array('colour' => 'green', 'animal' => 'bird', 'unique' => 2),
            array('colour' => 'blue', 'animal' => 'bird', 'unique' => 3),
            array('colour' => 'green', 'animal' => 'fish', 'unique' => 4)
        );

        $split = $this->interval->splitArrayByKey($mixed, 'colour');
        $this->assertEqual(count($split), 2);
        $this->assertEqual(count($split[0]), 2);
        $this->assertEqual($split[0][0]['unique'], 1);
        $this->assertEqual($split[0][1]['unique'], 3);
        $this->assertEqual($split[1][0]['unique'], 2);
        $this->assertEqual($split[1][1]['unique'], 4);
    }

    function testSplitArrayByKeyList()
    {
        $mixed = array(
            array('colour' => 'blue', 'animal' => 'fish', 'unique' => 1),
            array('colour' => 'blue', 'animal' => 'bird', 'unique' => 2),
            array('colour' => 'blue', 'animal' => 'bird', 'unique' => 3),
            array('colour' => 'green', 'animal' => 'fish', 'unique' => 4)
        );

        $split = $this->interval->splitArrayByKeyList($mixed, array('colour', 'animal'));
        $this->assertEqual(count($split), 3, 'There are three unique colour/animal combinations in the sample data. %s');
        $blue_bird_group = $split[1];
        $this->assertEqual(count($blue_bird_group), 2, 'There are two items with the colour blue and the animal bird. %s');
    }

    function testMinutesBetweenDateStrings_Simple()
    {
        $minutes = $this->interval->minutesBetweenDateStrings('2001-01-01 10:20:00', '2001-01-01 10:30:00');
        $this->assertEqual($minutes, 10, 'There are ten minutes between 10:20 and 10:30. %s');
    }

    function testMinutesBetweenDateStrings_CrossHourBoundary()
    {
        $minutes = $this->interval->minutesBetweenDateStrings('2001-01-01 10:55:00', '2001-01-01 11:05:00');
        $this->assertEqual($minutes, 10, 'There are ten minutes between 10:55 and 11:05. %s');
    }

    function testMinutesBetweenDateStrings_CrossDateBoundary()
    {
        $minutes = $this->interval->minutesBetweenDateStrings('2001-01-01 23:55:00', '2001-01-02 00:05:00');
        $this->assertEqual($minutes, 10, 'There are ten minutes between 23:55pm on Monday and 00:05 on Tuesday. %s');
    }

    function testDetectionOfLargeChangeInNumbers_FewSmallNumbers()
    {
        $few_small_numbers = array(5, 9, 11);
        $is_changed = $this->interval->isLargeChangeInNumbers($few_small_numbers);
        $this->assertTrue($is_changed);
    }

    function testDetectionOfLargeChangeInNumbers_FewLargeNumbers()
    {
        $few_large_numbers = array(5000, 9000, 11000);
        $is_changed = $this->interval->isLargeChangeInNumbers($few_large_numbers);
        $this->assertTrue($is_changed);
    }

    function testDetectionOfLargeChangeInNumbers_FewVariedNumbers()
    {
        $few_varied_numbers = array(5, 90000, 110);
        $is_changed = $this->interval->isLargeChangeInNumbers($few_varied_numbers);
        $this->assertTrue($is_changed);
    }

    function testDetectionOfLargeChangeInNumbers_IdenticalNumbers()
    {
        $few_small_numbers = array(9, 9, 9);
        $is_changed = $this->interval->isLargeChangeInNumbers($few_small_numbers);
        $this->assertFalse($is_changed);
    }

    function testDetectionOfLargeChangeInNumbers_Boundary()
    {
        $numbers_before = array(500, 490, 500);
        $numbers_after = array(600, 490, 500);
        $changed_before = $this->interval->isLargeChangeInNumbers($numbers_before);
        $changed_after = $this->interval->isLargeChangeInNumbers($numbers_after);
        $this->assertFalse($changed_before);
        $this->assertTrue($changed_after);
    }

    function testRange()
    {
    	$few_small_numbers = array(6, 9, 10, 8);
    	$range = $this->interval->calculateRange($few_small_numbers);
    	$this->assertEqual($range, 4, 'The range is the difference between the greatest and least values in a set. %s');
    }

    function testCaclulateRangeOfImpressionsForFragments_Simple()
    {
    	$stats_fragment = array(
    	    array(
    	        'interval_start' => '1996-03-16 04:00:00',
    	        'interval_end' => '1996-03-16 04:59:59',
    	        'expired' => null,
                'impressions_requested' => 60,
                'actual_impressions' => 50,
            )
        );
    	$info =& new MockTargetingStatistics($this);
    	$info->expectOnce('setMinimumRequestRate', array(new EqualExpectation(60)));
    	$info->expectOnce('setMaximumRequestRate', array(new EqualExpectation(60)));

        $this->interval->calculateRangeOfImpressionsForFragments($stats_fragment, &$info);
        $info->tally();
    }

        function testCaclulateRangeOfImpressionsForFragments_Split()
    {
    	$stats_fragment = array(
    	    array(
    	        'interval_start' => '1996-03-16 04:00:00',
    	        'interval_end' => '1996-03-16 04:59:59',
    	        'expired' => '1996-03-16 04:30:00',
                'impressions_requested' => 60,
                'actual_impressions' => 50,
            ),
            array(
    	        'interval_start' => '1996-03-16 04:00:00',
    	        'interval_end' => '1996-03-16 04:59:59',
    	        'expired' => null,
                'impressions_requested' => 70,
                'actual_impressions' => 50,
            )
        );
    	$info =& new MockTargetingStatistics($this);
    	$info->expectOnce('setMinimumRequestRate', array(new EqualExpectation(120)));
    	$info->expectOnce('setMaximumRequestRate', array(new EqualExpectation(140)));

        $this->interval->calculateRangeOfImpressionsForFragments($stats_fragment, &$info);
        $info->tally();
    }

    function testAddMinutes()
    {
        $now = '2003-04-05 06:07:08';
        $later = $this->interval->addMinutes($now, 3);
        $this->assertEqual($later, '2003-04-05 06:10:08');
    }

    function testInnerLengthForFragment_Entire()
    {
    	$length = $this->interval->innerLengthForFragment('1995-06-07 08:00:00', '1995-06-07 09:00:00', '1995-06-07 08:00:00', '1995-06-07 09:00:00', 60);
    	$this->assertEqual($length, 60);
    }

    function testInnerLengthForFragment_Split()
    {
    	$length = $this->interval->innerLengthForFragment('1995-06-07 08:00:00', '1995-06-07 09:00:00', '1995-06-07 08:00:00', '1995-06-07 08:30:00', 60);
    	$this->assertEqual($length, 30);
    }
}